{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "8bit-toggle",
  "type": "registry:component",
  "title": "8-bit Toggle",
  "description": "A retro 8-bit styled toggle component that mimics classic NES-style UI elements with bold yellow borders when active",
  "registryDependencies": [
    "toggle"
  ],
  "files": [
    {
      "path": "components/ui/8bit/toggle.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useEffect, useRef, useState } from \"react\"\nimport { Press_Start_2P } from \"next/font/google\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Toggle as ShadcnToggle, toggleVariants } from \"@/components/ui/toggle\"\n\nconst pressStart = Press_Start_2P({\n  weight: [\"400\"],\n  subsets: [\"latin\"],\n})\n\nexport const bitToggleVariants = cva(\"relative rounded-none border-none\", {\n  variants: {\n    font: {\n      normal: \"\",\n      retro: pressStart.className,\n    },\n  },\n  defaultVariants: {\n    font: \"retro\",\n  },\n})\n\nexport interface BitToggleProps\n  extends React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root>,\n    VariantProps<typeof toggleVariants>,\n    VariantProps<typeof bitToggleVariants> {\n  asChild?: boolean\n}\n\nfunction Toggle({ className, variant, size, font, ...props }: BitToggleProps) {\n  const [isActive, setIsActive] = useState(props.defaultPressed || false)\n  const toggleRef = useRef<HTMLButtonElement>(null)\n\n  // Update active state when toggle is clicked\n  const handlePressedChange = (pressed: boolean) => {\n    setIsActive(pressed)\n    if (props.onPressedChange) {\n      props.onPressedChange(pressed)\n    }\n  }\n\n  // Check for external changes to the pressed state\n  useEffect(() => {\n    if (props.pressed !== undefined) {\n      setIsActive(props.pressed)\n    }\n  }, [props.pressed])\n\n  // Check if toggle element has data-state=\"on\"\n  useEffect(() => {\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (\n          mutation.type === \"attributes\" &&\n          mutation.attributeName === \"data-state\"\n        ) {\n          const toggleElement = toggleRef.current\n          if (toggleElement) {\n            setIsActive(toggleElement.getAttribute(\"data-state\") === \"on\")\n          }\n        }\n      })\n    })\n\n    const toggleElement = toggleRef.current\n    if (toggleElement) {\n      observer.observe(toggleElement, { attributes: true })\n    }\n\n    return () => {\n      observer.disconnect()\n    }\n  }, [])\n\n  return (\n    <div className=\"relative inline-block\">\n      {/* Background and padding container that exactly mimics the B Bold image */}\n      <div className={cn(\n        \"absolute inset-0 z-0\",\n        isActive ? \"bg-yellow-500 border-2 border-yellow-700\" : \"bg-transparent border-transparent\"\n      )} />\n      \n      <ShadcnToggle\n        ref={toggleRef}\n        variant={variant}\n        size={size}\n        className={cn(\n          bitToggleVariants({ font }),\n          font !== \"normal\" && pressStart.className,\n          \"!rounded-none relative z-10\",\n          // Clear background and visible border when active\n          \"data-[state=on]:bg-transparent data-[state=on]:border-transparent\",\n          // Bold text when active\n          \"data-[state=on]:font-bold\",\n          className\n        )}\n        onPressedChange={handlePressedChange}\n        {...props}\n      />\n\n      {/* Outer border - exact match to the image */}\n      <div className={cn(\n        \"absolute -top-2 left-0 w-full h-2 bg-yellow-600 pointer-events-none\",\n        isActive ? \"opacity-100\" : \"opacity-0\"\n      )} />\n      <div className={cn(\n        \"absolute -bottom-2 left-0 w-full h-2 bg-yellow-600 pointer-events-none\",\n        isActive ? \"opacity-100\" : \"opacity-0\"\n      )} />\n      <div className={cn(\n        \"absolute top-0 -left-2 w-2 h-full bg-yellow-600 pointer-events-none\",\n        isActive ? \"opacity-100\" : \"opacity-0\"\n      )} />\n      <div className={cn(\n        \"absolute top-0 -right-2 w-2 h-full bg-yellow-600 pointer-events-none\",\n        isActive ? \"opacity-100\" : \"opacity-0\"\n      )} />\n\n      {/* Corner blocks */}\n      <div className={cn(\n        \"absolute -top-2 -left-2 w-2 h-2 bg-yellow-600 pointer-events-none\",\n        isActive ? \"opacity-100\" : \"opacity-0\"\n      )} />\n      <div className={cn(\n        \"absolute -top-2 -right-2 w-2 h-2 bg-yellow-600 pointer-events-none\",\n        isActive ? \"opacity-100\" : \"opacity-0\"\n      )} />\n      <div className={cn(\n        \"absolute -bottom-2 -left-2 w-2 h-2 bg-yellow-600 pointer-events-none\",\n        isActive ? \"opacity-100\" : \"opacity-0\"\n      )} />\n      <div className={cn(\n        \"absolute -bottom-2 -right-2 w-2 h-2 bg-yellow-600 pointer-events-none\",\n        isActive ? \"opacity-100\" : \"opacity-0\"\n      )} />\n    </div>\n  )\n}\n\nexport { Toggle }\n",
      "type": "registry:component",
      "target": "components/ui/8bit/toggle.tsx"
    }
  ]
} 